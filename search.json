[{"title":"Hello World","url":"/2025/09/19/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n一、Quick Start1、Create a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"智驾学习","url":"/2025/09/29/transformer/","content":"一、雷达1、启动雷达$ ros2 launch rslidar_sdk start.py\n2、将雷达格式转为velodyne格式$ ros2 launch rs_to_velodyne rs_to_velodyne.launch.xml\n订阅：&#x2F;points_raw发布：&#x2F;veloyne_points3、将三维点云转化为二维点云$ ros2 launch pointcloud_to_laserscan start_launch.py\n订阅：  &#x2F;velodyne_points (PointCloud2)发布：  &#x2F;scan (LaserScan)二、IMU1、惯性导航驱动$ ros2 launch imu_node imu_node.launch.py\n注：惯导驱动文件，发布imu消息等，如果gps可用，也会发布二、相机1、驱动$ ros2 run car_cmd_interface car_cmd_interface_node\n订阅：&emsp;&emsp;&#x2F;cmd_vel（geometry_msgs::msg::Twist，主要使用linear.x作为速度，单位m&#x2F;s）&emsp;&emsp;&#x2F;angle（std_msgs::msg::Float32，单位为角度）&emsp;&emsp;&#x2F;control_cmd（car_msg::msg::VehicleState）发布：&emsp;&emsp;&#x2F;vehicle_info（car_msg::msg::VehicleState）","categories":["智驾-感知"],"tags":["智驾"]},{"title":"智驾框架","url":"/2025/10/30/study/","content":"一、感知YOLOv5相机感知二、底盘2.1、进入工作空间$ cd ~/your_workspace  #替换为你的工作空间\n2.2、编译car_msg功能包$ colcon build --packages-select car_msg #因为控制和底盘都依赖car_msg\n2.3、编译底盘模块和其他依赖$ colcon build\n2.4、刷新环境变量$ source install/setup.bash #每次打开终端都需要执行\n2.5、启动底盘节点$ ros2 run car_cmd_interface car_cmd_interface_node\n注意：可能会出现can0的问题，可以执行以下命令$ sudo busybox devmem 0x0c303018 w 0xc458$ sudo busybox devmem 0x0c303010 w 0xc400$ sudo busybox devmem 0x0c303008 w 0xc458$ sudo busybox devmem 0x0c303000 w 0xc400$ sudo modprobe can$ sudo modprobe can_raw$ sudo modprobe mttcan# 关闭can0$ sudo ip link set down can0# 启动，bitrate 500000 表示将 can0 接口的比特率设置为 500 kbps$ sudo ip link set can0 type can bitrate 500000# 打开can0$ sudo ip link set up can0\n2.6、查看车辆的状态信息# 可以先查看一下topic话题$ ros2 topic list#  查看 /vehicle_info话题$ ros2 topic echo /vehicle_info\n注：在启动底盘节点后会从底盘通过can0读取车辆状态数据发布到这个话题，最后在终端输出车辆信息2.7、给一个简单的控制命令查看车的反应情况$ ros2 topic pub -r 10 /control_cmd car_msg/msg/VehicleState &quot;&#123;&#x27;velocity&#x27;: 0.0, &#x27;steering&#x27;: 3.0, &#x27;brake&#x27;: 0.0, &#x27;gears&#x27;: 0, &#x27;led&#x27;: &#x27;no&#x27;, &#x27;battary&#x27;: 90.0&#125;&quot;\n注意car_msg的参数配置（如下图）\n可以查看一下长时间一个转角，然后突然给一个别的转角，反应如何三、slam建图3.1、lidarslam_ros23.1.1、启动雷达# 进入driver文件夹$ source install/setup.bash# 启动雷达驱动$ ros2 run rslidar_sdk start.py# 启动slam运行launch文件$ ros2 launch lidarslam lidarslam.launch.py\n注：注意查看雷达话题名字，在lidarslam的yaml配置文件进行订阅和正确的配置可以通过这个查看雷达是否被slam配置节点（scan_matcher)所订阅$ ros2 topic info /rslidar_points --verbose \nscan_matcher成功订阅刚开始rviz只有一个坐标轴（正常），接下来移动小车，改变雷达的位置和朝向，采集更多环境点云，会逐渐出现点云地图（PointCloud2 组件）监控 &#x2F;tf话题,若出现 frame_id: “map”, child_frame_id: “base_link” 的变换，说明 map 坐标系生成，RViz 中设置 Fixed Frame: map 即可显示地图。$ ros2 topic echo /tf | grep &quot;map&quot;\n检查节点日志#若有 Update map 或 Published transform from map to base_link 日志，说明地图构建正常。$ ros2 topic echo /rosout | grep &quot;scan_matcher&quot;\n\n四、定位（lidar_localization_ros2）4.1、lidar_localization_ros2介绍基于预先生成的地图进行实时位姿估计\n4.2、配置好雷达话题和launch配置文件4.3、启动执行文件$ ros2 launch rslidar_sdk start.py  # 启动雷达 话题名称为/rslidar_points，消息类型为sensor_msgs/msg/PointCloud2（激光雷达点云数据） $ ros2 launch lidar_localization_ros2 lidar_localization.launch.py  # 启动执行文件$ ros2 topic info /rslidar_points --verbose # 查看lidar_localization是否  订阅雷达话题\n4.4、验证过程$ ros2 topic list | grep -E &quot;odom|pose&quot;  # 筛选位姿相关话题  输出/odom 和 /pcl_pose$ ros2 topic info /odom --verbose | grep &quot;Publisher&quot;  # 查看 /odom 话题的发布节点$ ros2 topic info /pcl_pose --verbose | grep &quot;Publisher&quot; # 查看 /pcl_pose (这个为定位模块的发布位姿话题)\n# 验证 /pcl_pose 位姿是否随运动动态更新$ ros2 topic echo /pcl_pose --noarr\n验证结果如下：\n注：成功标志：数值随雷达运动实时更新，无固定不变或异常跳变4.5、RViz 可视化最终验证4.5.1、查看定位模块的加载地图的cpp文件，确定地图发布的话题查看lidar_localization_component.hpp，我这里的initial_map_pub_发布的地图话题是/initial_map，而不是/map\n注：在rviz中设置中就要配置&#x2F;initial_map4.5.2、启动雷达$ ros2 launch rslidar_sdk start.py\n4.5.3、启动定位执行launch文件$ ros2 launch lidar_localization_ros2 lidar_localization.launch.py  # 启动执行文件\n4.5.4、发布初始位姿，触发定位匹配# 发布初始位姿到 /initialpose 话题（地图原点）# 发布后，cloudReceived 函数会开始处理雷达点云，/pcl_pose 位姿会随雷达移动更新$ ros2 topic pub /initialpose geometry_msgs/msg/PoseWithCovarianceStamped &quot;&#123;header: &#123;frame_id: &#x27;map&#x27;&#125;, pose: &#123;pose: &#123;position: &#123;x: 0.0, y: 0.0, z: 0.0&#125;, orientation: &#123;w: 1.0&#125;&#125;&#125;&#125;&quot;\n注：为什么需要发布初始位姿，手动发布初始位姿是为了解决 “定位模块与实际环境的初始对齐问题”，激光雷达定位（如 NDT、ICP）属于一个相对匹配算法，需要一个 初始的 “猜测位置”，才能开始计算。手动发布初始位姿，相当于给算法一个 “接近真实位置的初始猜测”，让它能快速找到正确的匹配关系。总而言之不要完全依赖算法自动初始化。（后续可以加载到配置文件）4.5.5、RViz配置Fixed Frame -------  mapPointClound2 （地图） -------- Topic : /initial_map  显示预加载地图PointCloud2（实时雷达） ------ Topic: /rslidar_points 显示实时点云PoseWithCovariance   -------   Topic: /pcl_pose  显示定位位姿\n4.5.6、成功标志红色实时雷达点云与 /initial_map 地图点云精准重合移动雷达时，/pcl_pose 箭头平滑跟随，position.x/y 数值同步变化\n4.5.7、结果展示(..&#x2F;..&#x2F;MP4&#x2F;视频.mp4)\n注：视频传不上去五、规划5.1、发布栅格地图5.1.1、进入nav2工作空间$ cd ~/ros2_map_server_ws$ colcon build --packages-select nav2_map_server nav2_common nav2_util nav2_msgs --cmake-args -DCMAKE_BUILD_TYPE=Release # 第一次编译$ source install/setup.bash\n注意只source一次，不要换环境，下下来直接打开新终端启动5.1.2、启动地图服务$ cd ~/auto_drving$ ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=map.yaml  # 启动即可# 然后激活，无报错即可$ ros2 lifecycle set /map_server configure$ ros2 lifecycle set /map_server activate$ ros2 topic echo /map | grep -A 10 &quot;info:&quot;  # 可以查看地图加载情况 (用作验证调试)$ ros2 topic echo /map nav_msgs/msg/OccupancyGrid  # 查看地图加载情况和位置信息 (用作验证调试)\n5.1.3、RViz可视化$ ros2 run rviz2 rviz2# 配置如下Fixed Frame ----- mapMap -----   Topic：/map\n注：如果出不来栅格地图，可以执行以下步骤$ pkill -f nav2_map_server$ ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=map.yaml\n显示结果如下：\n5.2、进行规划操作5.2.1、启动规划配置文件$ ros2 run nav2_planner planner_server --ros-args --params-file ~/auto_driving/nav2_params.yaml\n5.2.2、发布起始位姿$ ros2 topic pub /initialpose geometry_msgs/msg/PoseWithCovarianceStamped &quot;header:  frame_id: &#x27;map&#x27;pose:  pose:    position: &#123;x: 0.0, y: 0.0, z: 0.0&#125;    orientation: &#123;x: 0.0, y: 0.0, z: 0.0, w: 1.0&#125;  covariance: [0.25,0,0,0,0,0, 0,0.25,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0.0685]&quot; -1\n5.2.3、发布目标位姿$ ros2 topic pub /goal_pose geometry_msgs/msg/PoseStamped &quot;header:  frame_id: &#x27;map&#x27;pose:  position: &#123;x: 1.0, y: 1.0, z: 0.0&#125;  orientation: &#123;x: 0.0, y: 0.0, z: 0.0, w: 1.0&#125;&quot; -1\n————————————————————————————卡到这了\n5.2.4、查看规划结果$ ros2 topic echo /plan nav_msgs/msg/Path\n\n六、控制6.1、启动了一下launch文件$ ros2 launch car_simple_follow start_all.launch.xml\n注：启动后光轮子转一下，没有任何别的反应目前想法：处理完整体框架后，记住地图起点位置进行建图，然后进行后续实现","categories":["智驾-框架"],"tags":["智驾"]}]